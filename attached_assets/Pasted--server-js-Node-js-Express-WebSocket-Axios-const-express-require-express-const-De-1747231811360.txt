// server.js (Node.js + Express + WebSocket + Axios)

const express = require("express");
const { Deepgram } = require("@deepgram/sdk");
const { Configuration, OpenAIApi } = require("openai");
const http = require("http");
const WebSocket = require("ws");
require("dotenv\config");

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const deepgram = new Deepgram(process.env.DEEPGRAM_API_KEY);
const configuration = new Configuration({ apiKey: process.env.OPENAI_API_KEY });
const openai = new OpenAIApi(configuration);

app.use(express.json());

// WebSocket para áudio
wss.on("connection", async (ws) => {
  const deepgramLive = deepgram.transcription.live({
    punctuate: true,
    model: "nova-3",
    smart_format: true,
    diarize: true
  });

  deepgramLive.addListener("transcriptReceived", async (msg) => {
    const transcriptData = JSON.parse(msg);
    const transcript = transcriptData.channel?.alternatives[0]?.transcript;

    if (transcript && transcript.length > 20) {
      console.log("Transcrição recebida:", transcript);

      // Gera prontuário com GPT-4o
      const response = await openai.createChatCompletion({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: "Você é um médico experiente. Abaixo está a transcrição de uma consulta entre médico e paciente. Gere um prontuário clínico estruturado no formato SOAP (Subjetivo, Objetivo, Avaliação, Plano)."
          },
          {
            role: "user",
            content: transcript
          }
        ]
      });

      const prontuario = response.data.choices[0].message.content;
      ws.send(JSON.stringify({ prontuario }));
    }
  });

  deepgramLive.addListener("error", (error) => {
    console.error("Erro Deepgram:", error);
  });

  deepgramLive.addListener("close", () => {
    console.log("Conexão Deepgram encerrada.");
  });

  ws.on("message", (message) => {
    if (deepgramLive.getReadyState() === 1) {
      deepgramLive.send(message);
    }
  });

  ws.on("close", () => {
    deepgramLive.finish();
  });
});

// Inicia o servidor
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
